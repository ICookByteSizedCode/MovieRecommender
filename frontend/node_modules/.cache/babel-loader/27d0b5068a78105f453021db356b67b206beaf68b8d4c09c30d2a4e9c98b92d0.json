{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Peep\\\\Documents\\\\GitHub\\\\COMPSCI520Project\\\\frontend\\\\src\\\\pages\\\\RecommendedMovies.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RecommendedMovies({\n  userPreferences,\n  favoriteMovies\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3000/recommendations', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        preferences: userPreferences,\n        favoriteMovies\n      })\n    }).then(response => response.json()).then(data => {\n      fetchMovieDetails(data); // Fetch TMDB details based on titles\n    }).catch(err => console.error('Error fetching recommendations:', err));\n  }, [userPreferences, favoriteMovies]);\n  function fetchMovieDetails(movieTitles) {\n    movieTitles.forEach(title => {\n      // Assuming fetchMovieDetails fetches movie details from TMDB\n      fetchMovieDetails(title).then(movie => {\n        setMovies(prevMovies => [...prevMovies, movie]);\n      });\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n      movie: movie\n    }, movie.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(RecommendedMovies, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = RecommendedMovies;\nexport default RecommendedMovies;\nvar _c;\n$RefreshReg$(_c, \"RecommendedMovies\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","RecommendedMovies","userPreferences","favoriteMovies","_s","movies","setMovies","fetch","method","headers","body","JSON","stringify","preferences","then","response","json","data","fetchMovieDetails","catch","err","console","error","movieTitles","forEach","title","movie","prevMovies","children","map","MovieCard","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Peep/Documents/GitHub/COMPSCI520Project/frontend/src/pages/RecommendedMovies.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction RecommendedMovies({ userPreferences, favoriteMovies }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:3000/recommendations', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ preferences: userPreferences, favoriteMovies })\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      fetchMovieDetails(data); // Fetch TMDB details based on titles\r\n    })\r\n    .catch(err => console.error('Error fetching recommendations:', err));\r\n  }, [userPreferences, favoriteMovies]);\r\n\r\n  function fetchMovieDetails(movieTitles) {\r\n    movieTitles.forEach(title => {\r\n      // Assuming fetchMovieDetails fetches movie details from TMDB\r\n      fetchMovieDetails(title).then(movie => {\r\n        setMovies(prevMovies => [...prevMovies, movie]);\r\n      });\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {movies.map(movie => (\r\n        <MovieCard key={movie.id} movie={movie} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RecommendedMovies;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,iBAAiBA,CAAC;EAAEC,eAAe;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EAC9D,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACdU,KAAK,CAAC,uCAAuC,EAAE;MAC7CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,WAAW,EAAEX,eAAe;QAAEC;MAAe,CAAC;IACvE,CAAC,CAAC,CACDW,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZC,iBAAiB,CAACD,IAAI,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,CACDE,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEF,GAAG,CAAC,CAAC;EACtE,CAAC,EAAE,CAAClB,eAAe,EAAEC,cAAc,CAAC,CAAC;EAErC,SAASe,iBAAiBA,CAACK,WAAW,EAAE;IACtCA,WAAW,CAACC,OAAO,CAACC,KAAK,IAAI;MAC3B;MACAP,iBAAiB,CAACO,KAAK,CAAC,CAACX,IAAI,CAACY,KAAK,IAAI;QACrCpB,SAAS,CAACqB,UAAU,IAAI,CAAC,GAAGA,UAAU,EAAED,KAAK,CAAC,CAAC;MACjD,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,oBACE1B,OAAA;IAAA4B,QAAA,EACGvB,MAAM,CAACwB,GAAG,CAACH,KAAK,iBACf1B,OAAA,CAAC8B,SAAS;MAAgBJ,KAAK,EAAEA;IAAM,GAAvBA,KAAK,CAACK,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CAC1C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC/B,EAAA,CAlCQH,iBAAiB;AAAAmC,EAAA,GAAjBnC,iBAAiB;AAoC1B,eAAeA,iBAAiB;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}